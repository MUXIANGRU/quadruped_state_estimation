<?xml version="1.0"?>

<!-- IMPORTANT: this file is not the official URDF. It is required to inizialize DWL data structures 
 It differs from the official URDF because it has a floating base, it has no sensors and it has  
 leg names with forced names to have our conventional ordering: LF RF LH RH -->
<robot name="hyq" xmlns:xacro="http://ros.org/wiki/xacro">

	<!-- The following included files set up definitions of parts of the robot body -->
	<xacro:include filename="$(find hyq_description)/urdfs/common.xacro"/>
	<!-- HyQ trunk -->
	<xacro:include filename="$(find hyq_description)/urdfs/trunk/trunk_model.urdf.xacro"/>

	<!-- HyQ legs -->
	<xacro:include filename="$(find hyq_description)/urdfs/leg/leg.urdf.xacro"/>

	<!-- generic simulator_gazebo plugins for starting mechanism control, ros time -->
	<xacro:include filename="$(find hyq_description)/gazebo/gazebo.urdf.xacro"/>
        <xacro:include filename="$(find sensors_description)/urdfs/sensors/microstrain_3dmgx425_imu.urdf.xacro"/>

	<!-- Now we can start using the macros included above to define the actual HyQ -->

	<!-- The first use of a macro. This one was defined in trunk.urdf.xacro above.
A macro like this will expand to a set of link and joint definitions, and to additional
Gazebo-related extensions (sensor plugins, etc). The macro takes an argument, name,
that equals "base", and uses it to generate names for its component links and joints
(e.g., base_link). The included origin block is also an argument to the macro. By convention,
the origin block defines where the component is w.r.t its parent (in this case the parent
is the world frame). For more, see http://ros.org/wiki/xacro -->

	<!-- body -->
	<!-- trunk -->
	<xacro:hyq_trunk name="base">
		<!--origin xyz="-0.443 -0.191 -0.276" rpy="0 0 0"/-->
	</xacro:hyq_trunk>

	<!-- LF leg -->
<!-- Forcing the ordering LF RF LH RH. The trick works even for the joint states, by chance, 
because HAA HFE and KFE are already in alphabetical order -->
	<xacro:hyq_leg
		name="01_lf"
		parent="trunk"
		reflect_hip="1"
		reflect_upper="1"
		reflect_front="1"
		knee_bent_backward="1"
		load_force_sensors="false">
		<origin xyz="${d_fh/2} ${d_lr/2} 0" rpy="0 ${PI/2} ${PI}"/>
	</xacro:hyq_leg>

	<!-- RF leg -->
<!-- Forcing the ordering LF RF LH RH. The trick works even for the joint states, by chance, 
because HAA HFE and KFE are already in alphabetical order -->

	<xacro:hyq_leg
		name="02_rf"
		parent="trunk"
		reflect_hip="-1"
		reflect_upper="-1"
		reflect_front="1"
		knee_bent_backward="1"
		load_force_sensors="false">
		<origin xyz="${d_fh/2} ${-d_lr/2} 0" rpy="0 ${PI/2} 0"/>
	</xacro:hyq_leg>

	<!-- LH leg -->
<!-- Forcing the ordering LF RF LH RH. The trick works even for the joint states, by chance, 
because HAA HFE and KFE are already in alphabetical order -->
	<xacro:hyq_leg
		name="03_lh"
		parent="trunk"
		reflect_hip="-1"
		reflect_upper="1"
		reflect_front="-1"
		knee_bent_backward="0"
		load_force_sensors="false">
		<origin xyz="${-d_fh/2} ${d_lr/2} 0" rpy="0 ${PI/2} ${PI}"/>
	</xacro:hyq_leg>

	<!-- RH leg -->
<!-- Forcing the ordering LF RF LH RH. The trick works even for the joint states, by chance, 
because HAA HFE and KFE are already in alphabetical order -->
	<xacro:hyq_leg
		name="04_rh"
		parent="trunk"
		reflect_hip="1"
		reflect_upper="-1"
		reflect_front="-1"
		knee_bent_backward="0"
		load_force_sensors="false">
		<origin xyz="${-d_fh/2} ${-d_lr/2} 0" rpy="0 ${PI/2} 0"/>
	</xacro:hyq_leg>

	<!-- IMU trunk -->
	<xacro:microstrain_3dmgx425_imu
		parent="trunk"
		imu_name="trunk_imu"
		imu_topic="trunk_imu/data"
		update_rate="250">
		<origin xyz="0.290 0.000 0.0999214" rpy="0 ${-PI} 0"/>
	</xacro:microstrain_3dmgx425_imu>

</robot>
